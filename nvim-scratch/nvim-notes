Trick yourself to enjoy reading :)

# Commands
:messages                         --> shows printed messages
:source %                         --> source will run the file. % is a "placeholder" for current file.
:nnoremap <space>                 --> will print normal remaps for space
:lua = vim                        --> prints vim object
:lua = vim.api                    --> prints vim.api object
:fclose                           --> closes floating window
:fc                               --> closes floating window
:verbose map g                    --> opens mappings for 'g'
:lua vim.diagnostic.setqflist()   --> opens mappings for 'g'

:e lua/config/lazy.lua            --> create a file lazy.lua inside of lua/config directory
:e                                --> load the latest version
:e!                               --> load the latest version even if you have unsaved changes
!mkdir lua                        --> execute mkdir lua

# Tricks
Run only visually selected lua code.
Select the code and send command lua
- select
- type <:>
- type <lua>
- enter

In insert mode, press Ctrl+w to remove word, just like you would do Ctrl+backspace.

# Nvim
## stdpath
vim.fn.stdpath("data")
Nvim has built-in functions that are living inside vim.fn. You can execute them
:echo stdpath("data")
This follows xdg config path (.local/share/nvim).

:echo &buftype
in lua land
:lua =vim.bo.buftype

## runtime path
vim.opt.rtp:prepend(lazypath)
Put lazypath into the runtimepath of nvim

## options
Default to 1 tab and display it as 8 spaces (columns).
vim.opt.shiftwidth = 8, let's change that to 4

In your .config create after/ftplugin folder and then files with local config.
To set local config for lua files just create file lua.lua with config
vim.opt_local.shiftwidth = 2

## Treesitter
Treesitter already is installed with nvim, just execute command
:lua vim.treesitter.

# Plugins
Runtime path   --> :echo nvim_list_runtime_paths()
nvim will look through runtime_paths() for lua folder and load lua files.
nvim will also look at 'plugin' folder in your nvim config directory. Those files
will be automatically source at every nvim startup.

## Lazy
Downloads the plugin, puts it inside nvim runtimepath so then your config
will be able to use code from plugin.

the 'build' configuration is executed whenever we update given plugin.
:InspectTree

## API
vim.inspect
Create user command
vim.api.nvim_create_user_command

## LSP

:help lsp

:echo executable('lua_ls')

type
vim.l
then Ctrl+x, Ctrl+o
to see omni completion,
:help ins-completion

Ctrl+]         --> go to definition of a x, go to tag
Ctrl+t         --> go back
Ctrl+x,Ctrl+;  --> completes current line

Both nvim and lua lsp respects .editorconfig

## Telescope

:Telescope builtin

While looking at Telescope find_files
you can type
Ctrl+/
to see all the options

# Oil
press '-' to move to parent directory

# Buffers, Windows, Tabs
A buffer is the in-memory text of a file.
A window is a viewport on a buffer.
A tab page is a collection of windows.

The wincmd command can control windows. Windows are just view of a buffer.
Thing for example about the quickfix list. qf list is just a window.
:help :wincmd

The idea is that Ctrl+w is the prefix that controls the windows.
Ctrl+w q         --> closes the current window
Ctrl+w s         --> opens a new window above
Ctrl+w v         --> opens a new window on the right hand side
Movments
Ctrl+w h         --> move cursor to the right window
Ctrl+w l         --> move cursor to the left window
Ctrl+w j         --> move cursor to the window below
Ctrl+w k         --> move cursor to the window above
Last resort
Ctrl+w Ctrl+w    --> cycle through the open windows

in nvim keymap Ctrl+w is just <C-w>.

# Quickfix list
The idea is to support edit-compile-edit cycle.
Save errors from compiler to quickfix list and fix one after the other.

How to get errors into quickfix list
  - inside Telescope Ctrl+q (find_files, ...)
  - inside Lsp Ctrl+q (grr, find references)
  - vim.diagnostic.setqflist()
	-- write function that filter only to the current project
  - setqjlist()
  - make as well, but maybe lsp is better

You can also "move" files found by Telescope into quickfix list.
Ctrl+q will do that.

    " get the title of the current quickfix list
    :echo getqflist({'title' : 0}).title

:copen                 --> open quickfix list
:cclose                --> close quickfix list
:cnext                 --> open next error on the buffer from quickfix list
:cprev                 --> open previous error on the buffer from quickfix list
:cdo s/some/more/gc    --> will execute 's/some/more' on every quickfix item.
    useful when you what to rename variable just
    do grr (find references) and then :cdo s/some/more

# Helps
:help substitute
:help ins-completion
:help key-notation
:help :map-alt-keys
:help :term


# Motions
0          --> jump to the front of the line
$          --> jump to the end of the line
w          --> jump to the start of next word
e          --> jump to the end of next word
b          --> jump to the start of previous word

# Operator
d          --> delete the character
dd         --> delete the line
u          --> undo last command
U          --> to fix whole line
=G         --> formats the current buffer
gt         --> move you through the open tabs

# Operators and Motions
d$         --> delete to the end of the line

# Count operation motion
d2w        --> deletes next 2 words
2w         --> jumps 2 words

